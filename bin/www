#!/usr/bin/env node

require("dotenv").config();

const logger = require("../utilities/logger");
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("magda-art-server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * import db instance
 */

// const db = require("../config/database");
const db = require("../models");

async function initApp() {
  logger.debug("testing database connection");
  try {
    await db.sequelize.authenticate();
    logger.info("Connection has been established successfully.");
    // syncing db models
    await db.sequelize.sync();
    logger.info("All models were synchronized successfully");
  } catch (error) {
    logger.error("Unable to connect to the database:", error);
    process.exit(1);
  }
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      logger.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      logger.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  if (process.env.NODE_ENV !== "production") {
    logger.info("Listening on " + bind);
  }
}

function gracefulShutdown() {
  logger.info("Received kill signal, shutting down gracefully...");
  server.close(() => {
    logger.info("Closed out remaining connections.");
    db.sequelize.close().then(() => {
      logger.info("Database connection closed.");
      process.exit(0);
    });
  });

  // If after 10 seconds, shut down forcefully
  setTimeout(() => {
    console.error(
      "Could not close connections in time, forcefully shutting down"
    );
    process.exit(1);
  }, 10000);
}

// Listen for termination signals
process.on("SIGTERM", gracefulShutdown);
process.on("SIGINT", gracefulShutdown);

initApp();
